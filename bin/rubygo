#!/usr/bin/env ruby

require "hilighter"
require "io/wait"
require "optparse"
require "pathname"
require "rubygo"

class RubyGoExit
    GOOD = 0
    INVALID_OPTION = 1
    INVALID_ARGUMENT = 2
    MISSING_ARGUMENT = 3
    EXTRA_ARGUMENTS = 4
    EXCEPTION = 5
    AMBIGUOUS_ARGUMENT = 6
    UNSUPPORTED_ART = 7
end

def parse(args)
    options = Hash.new
    options["verbose"] = false

    info = "Test go native extension."

    parser = OptionParser.new do |opts|
        opts.summary_width = 16

        opts.banner = [
            "Usage: #{File.basename($0)} [OPTIONS]",
            "<add|sub> <a> <b>"
        ].join(" ")

        opts.on("", "DESCRIPTION")

        info.scan(/\S.{0,76}\S(?=\s|$)|\S+/).each do |line|
            opts.on("    #{line}")
        end

        opts.on("", "OPTIONS")

        opts.on("-h", "--help", "Display this help message") do
            puts opts
            exit RubyGoExit::GOOD
        end

        opts.on(
            "-v",
            "--verbose",
            "Show backtrace when error occurs"
        ) do
            options["verbose"] = true
        end

        opts.on("--version", "Show version") do
            __FILE__.match(/rubygo-(\d+\.\d+\.\d+)/) do |m|
                puts m[1]
            end
            exit RubyGoExit::GOOD
        end
    end

    begin
        parser.parse!
    rescue OptionParser::InvalidOption => e
        puts e.message
        puts parser
        exit RubyGoExit::INVALID_OPTION
    rescue OptionParser::InvalidArgument => e
        puts e.message
        puts parser
        exit RubyGoExit::INVALID_ARGUMENT
    rescue OptionParser::MissingArgument => e
        puts e.message
        puts parser
        exit RubyGoExit::MISSING_ARGUMENT
    rescue OptionParser::AmbiguousOption => e
        puts e.message
        puts parser
        exit RubyGoExit::AMBIGUOUS_ARGUMENT
    end

    if (args.length > 3)
        puts parser
        exit RubyGoExit::EXTRA_ARGUMENTS
    elsif (args.length != 3)
        puts parser
        exit RubyGoExit::MISSING_ARGUMENT
    end

    options["operation"] = args[0]
    options["a"] = args[1].to_i
    options["b"] = args[2].to_i

    return options
end

begin
    options = parse(ARGV)
rescue Interrupt
    # Exit gracefully on ^C
    exit RubyGoExit::GOOD
end

begin
    case options["operation"]
    when "add"
        puts RubyGo.Add(options["a"], options["b"])
    when "sub"
        puts RubyGo.Minus(options["a"], options["b"])
    else
        puts "Unsupported operation"
    end
rescue Interrupt
    # Exit gracefully on ^C
rescue Errno::EPIPE
    # Do nothing. This can happen if piping to another program such as
    # less. Usually if less is closed before we're done with STDOUT.
rescue Exception => e
    $stderr.puts "Oops! Looks like an error has occured! If the " \
        "error persists, file a bug at:".wrap
    $stderr.puts
    $stderr.puts "    https://gitlab.com/mjwhitta/rubygo/issues"
    $stderr.puts
    $stderr.puts "Maybe the message below will help. If not, you " \
        "can use the --verbose flag to get a backtrace.".wrap

    $stderr.puts e.message.white.on_red
    if (options["verbose"])
        e.backtrace.each do |line|
            $stderr.puts line.light_yellow
        end
    end
    exit RubyGoExit::EXCEPTION
end
exit RubyGoExit::GOOD
